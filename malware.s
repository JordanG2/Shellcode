section .data
    file db 'test_elf', 0    
    buffer times 256 db 0
        
    message_elf db "Il s'agit d'un fichier ELF",10,0
    length_elf equ $-message_elf
    
    message_not_elf db "Ce n'est pas un fichier elf",10,0
    length_not_elf equ $-message_not_elf
    
    error_msg db "Erreur de lecture", 10, 0
    length_error equ $-error_msg
    
    message_found_ptnote db "C'est ici qu'on va injecter du code", 10, 0
    length_found_ptnote equ $-message_found_ptnote
    
    message_no_ptnote db "Segment PT_NOTE non trouvé", 10, 0
    length_no_ptnote equ $-message_no_ptnote

    message_segments_looked db "On parcours les segments pour retrouver PT_Note ", 10, 0
    length_segments_looked equ $-message_segments_looked

    print_value_buffer db '00000000', 10, 0   ; Buffer pour afficher les valeurs
    length_print_value equ $-print_value_buffer
    
    ; Constantes
    PT_NOTE equ 4
    PT_LOAD equ 1

section .text
    global _start

_start:
    ; Ouvrir le fichier
    mov rax, 2               ; Appel système open
    mov rdi, file            ; Nom du fichier
    mov rsi, 0               ; Mode lecture seule
    mov rdx, 0               ; Pas de flag
    syscall                  ; Exécuter open
    test rax, rax
    js error_exit
    mov r9, rax             ; Stocker le descripteur de fichier

read_firstByte:
    ; Lire les premiers octets pour vérifier s'il s'agit d'un fichier ELF
    mov rax, 0               ; Appel système read
    mov rdi, r9
    mov rsi, buffer          ; Stocker les données lues dans le buffer
    mov rdx, 64              ; Lire 64 octets
    syscall                  ; Exécuter read
    test rax, rax
    js error_exit

    ; Vérifier si c'est un fichier ELF
    cmp dword [buffer], 0x464C457F   ; Comparer avec le magic number ELF
    je ELF_file

not_ELF_file:
    ; Gérer les fichiers non ELF
    mov rax, 1
    mov rdi, 1
    mov rsi, message_not_elf
    mov rdx, length_not_elf
    syscall
    jmp end

ELF_file:
    ; Afficher un message pour un fichier ELF
    mov rax, 1
    mov rdi, 1
    mov rsi, message_elf
    mov rdx, length_elf
    syscall
    
    ; Passer à l'analyse de la table des segments
    jmp Parse
          
Parse:
    mov rsi, buffer                ; Pointeur vers le buffer ELF

    ; Récupérer l'offset de la table des programmes (e_phoff) et le nombre d'entrées (e_phnum)
    mov rax, [buffer+0x20]          ; e_phoff (offset de la table des programmes)
    mov r8, rax                     ; sauvegarde
    movzx rcx, word [buffer+0x36]   ; Taille d'une entrée 
    movzx rbx, word [buffer+0x38]   ; nombre de segments

    ; Message pour indiquer que l'on recherche PT_note
    mov rax, 1
    mov rdi, 1
    mov rsi, message_segments_looked
    mov rdx, length_segments_looked
    syscall
    
    ; Si e_phnum = 0, pas de segments
    test rbx, rbx
    jz limit_reached
    
    ; On initialise un compteur pour parcourir les entrées de la table des programmes
    xor r12, r12

check_segments_loop:
    ; Vérifier si nous avons atteint la fin de la table des en-têtes de programme
    cmp r12, rbx
    jge limit_reached               ; Si on a parcouru tous les segments, sortir

    ; Calculer l'offset du segment actuel dans le fichier (e_phoff + i*e_phentsize)
    mov rax, r12    ; rdx est la taille d'un segment
    mul rcx         ; i * e_phentsize
    add rax, r8     ; e_phoff + i*e_phentsize
    mov r10, rax    ; offset
    
    ; Se positionner au bon endroit
    mov rax, 8        ; sys_lseek
    mov rdi, r9       ; fd
    mov rsi, r10      ; offset
    xor rdx, rdx      ; SEEK_SET = 0
    syscall
    test rax, rax
    js error_exit
    
    ; On lit le Program Header courant
    mov rax, 0        ; sys_read
    mov rdi, r9
    mov rsi, buffer
    mov rdx, rcx       ; taille du Program Header
    syscall
    test rax, rax
    js error_exit

    ; Vérifier si p_type (4 premiers octets du PH) == PT_NOTE
    cmp dword [buffer], PT_NOTE
    je found_pt_note

    ; Si pas trouvé, on passe au suivant
    inc r12
    jmp check_segments_loop

found_pt_note:
    ; Si un segment PT_NOTE est trouvé, afficher un message
    mov rax, 1
    mov rdi, 1
    mov rsi, message_found_ptnote
    mov rdx, length_found_ptnote
    syscall

    ; Passer à la suite
    jmp end

limit_reached:
    ; Si on a parcouru tous les segments et qu'on n'a pas trouvé PT_NOTE
    mov rax, 1
    mov rdi, 1
    mov rsi, message_no_ptnote
    mov rdx, length_no_ptnote
    syscall

    jmp end

error_exit:
    ; Afficher un message d'erreur
    mov rax, 1
    mov rdi, 1
    mov rsi, error_msg
    mov rdx, length_error
    syscall

end:
    ; Sortir du programme
    mov rax, 60 
    xor rdi, rdi                
    syscall
