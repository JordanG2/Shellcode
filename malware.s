section .data
    file db 'Ex1', 0    
    buffer db 64
        
    message_elf db "Il s'agit d'un fichier ELF",10,0
    length_elf equ $-message_elf
    
    message_not_elf db "Ce n'est pas un fichier elf",10,0
    length_not_elf equ $-message_not_elf
    
    error_msg db "Erreur de lecture", 10, 0
    length_error equ $-error_msg
    
    print_value_buffer db '00000000', 10, 0   ; Buffer pour afficher les valeurs
    length_print_value equ $-print_value_buffer

section .text
    global _start

_start:
    ; Ouvrir le fichier
    mov rax, 2               ; Appel système open
    mov rdi, file            ; Nom du fichier
    mov rsi, 0               ; Mode lecture seule
    mov rdx, 0               ; Pas de flag
    syscall                  ; Exécuter open
    test rax, rax
    js error_exit
    mov rdi, rax             ; Stocker le descripteur de fichier dans rdi

read_firstByte:
    ; Lire les premiers octets pour vérifier s'il s'agit d'un fichier ELF
    mov rax, 0               ; Appel système read
    mov rsi, buffer          ; Stocker les données lues dans le buffer
    mov rdx, 64              ; Lire 64 octets
    syscall                  ; Exécuter read
    test rax, rax
    js error_exit

    ; Vérifier si c'est un fichier ELF
    cmp dword [buffer], 0x464C457F   ; Comparer avec le magic number ELF
    je ELF_file

not_ELF_file:
    ; Gérer les fichiers non ELF
    mov rax, 1
    mov rdi, 1
    mov rsi, message_not_elf
    mov rdx, length_not_elf
    syscall
    jmp end

ELF_file:
    ; Afficher un message pour un fichier ELF
    mov rax, 1
    mov rdi, 1
    mov rsi, message_elf
    mov rdx, length_elf
    syscall
    
    jmp Parse
          
Parse:
    mov rsi, buffer
    movzx eax, word [rsi + 16] ; e_type
    call print_value           ; Affiche le type
    
    movzx eax, word [rsi + 18] ; e_machine
    call print_value           ; Affiche l'architecture

    mov eax, dword [rsi + 20]  ; e_version
    call print_value           ; Affiche la version

    mov eax, dword [rsi + 24]  ; e_entry
    call print_value           ; Affiche le point d'entrée

    mov eax, dword [rsi + 32]  ; e_phoff
    call print_value           ; Affiche l'offset de l'en-tête de programme
    
    jmp end

error_exit:
    ; Afficher un message d'erreur
    mov rax, 1
    mov rdi, 1
    mov rsi, error_msg
    mov rdx, length_error
    syscall

print_value:
    push rax               ; Sauvegarder EAX
    push rbx               ; Sauvegarder EBX (diviseur 10)
    push rsi               ; Sauvegarder RSI

    mov rsi, print_value_buffer  ; Pointeur vers le buffer
    add rsi, 7             ; Place le pointeur à la fin (dernière position avant '\n')
    mov rcx, 8             ; 8 chiffres à traiter

convert_loop:
    xor rdx, rdx           ; Efface RDX (reste de la division)
    mov rbx, 10            ; Diviseur (valeur 10)
    div rbx                ; Divise EAX par 10 (division unsigned)
    add dl, '0'            ; Convertit le chiffre en ASCII
    mov [rsi], dl          ; Stocke le caractère ASCII dans le buffer
    dec rsi                ; Décrémente le pointeur
    loop convert_loop      ; Répète pour les 8 chiffres

    ; Afficher le buffer
    mov rax, 1             ; Appel système write
    mov rdi, 1             ; Sortie standard (stdout)
    mov rsi, print_value_buffer  ; Buffer à écrire
    mov rdx, length_print_value  ; Taille de la chaîne
    syscall

    pop rsi                ; Restaurer RSI
    pop rbx                ; Restaurer EBX
    pop rax                ; Restaurer EAX
    ret


end:
    ; Sortir du programme
    mov rax, 60 
    xor rdi, rdi                
    syscall

